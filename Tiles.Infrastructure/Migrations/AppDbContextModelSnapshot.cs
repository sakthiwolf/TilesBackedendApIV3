// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tiles.Infrastructure.Data;

#nullable disable

namespace Tiles.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Name = "Wall Tiles"
                        },
                        new
                        {
                            Id = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Name = "Floor Tiles"
                        });
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Ecatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Ecatalogs");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.EcatalogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EcatalogCategories");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Instagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Instagrams");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Disclaimer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link360")
                        .HasColumnType("text");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductSizes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1111111-d222-4e33-b444-d55555555555"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Colors = "White,Ivory",
                            Description = "Elegant glossy white tile ideal for walls.",
                            Disclaimer = "Color tone may vary due to lighting.",
                            Link360 = "https://example.com/360/glossy-white",
                            ProductImage = "https://example.com/images/glossy-white.jpg",
                            ProductName = "Glossy White Tile",
                            ProductSizes = "12x18,12x24",
                            SerialNumber = "P001",
                            Stock = 120,
                            SubCategoryId = new Guid("11111111-2222-3333-4444-555555555555")
                        },
                        new
                        {
                            Id = new Guid("e1111111-e222-4e33-f444-e55555555555"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Colors = "Beige,Cream",
                            Description = "A soft matt beige wall tile.",
                            Disclaimer = "Shade may differ slightly between batches.",
                            ProductImage = "https://example.com/images/matt-beige.jpg",
                            ProductName = "Matt Beige Tile",
                            ProductSizes = "12x24",
                            SerialNumber = "P002",
                            Stock = 80,
                            SubCategoryId = new Guid("66666666-7777-8888-9999-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f1111111-f222-4e33-f444-f55555555555"),
                            CategoryId = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Colors = "Grey",
                            Description = "Perfect for wet areas with anti-skid surface.",
                            Disclaimer = "Surface texture may feel different after use.",
                            Link360 = "https://example.com/360/anti-skid-grey",
                            ProductImage = "https://example.com/images/anti-skid-grey.jpg",
                            ProductName = "Anti-Skid Grey Tile",
                            ProductSizes = "16x16,24x24",
                            SerialNumber = "P003",
                            Stock = 140,
                            SubCategoryId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = new Guid("a1111111-a222-4e33-a444-a55555555555"),
                            CategoryId = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Colors = "Black,Charcoal",
                            Description = "High-end tile with a granite stone look.",
                            Disclaimer = "Granite texture varies by lot.",
                            ProductImage = "https://example.com/images/granite-black.jpg",
                            ProductName = "Granite Look Black Tile",
                            ProductSizes = "24x24",
                            SerialNumber = "P004",
                            Stock = 60,
                            SubCategoryId = new Guid("99999999-aaaa-bbbb-cccc-dddddddddddd")
                        },
                        new
                        {
                            Id = new Guid("b1111111-b222-4e33-b444-b55555555555"),
                            CategoryId = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Colors = "White,Grey",
                            Description = "Shiny granite-style tile for modern floors.",
                            Disclaimer = "Inspect each box for consistency before install.",
                            Link360 = "https://example.com/360/granite-white",
                            ProductImage = "https://example.com/images/granite-white.jpg",
                            ProductName = "Granite Look White Tile",
                            ProductSizes = "24x24,32x32",
                            SerialNumber = "P005",
                            Stock = 100,
                            SubCategoryId = new Guid("99999999-aaaa-bbbb-cccc-dddddddddddd")
                        });
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("WhatsappNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Address = "No. 10, Mount Road, Chennai",
                            City = "Chennai",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerName = "Ravi Kumar",
                            Email = "ravi@example.com",
                            Map = "https://maps.google.com/?q=ravi+traders",
                            Name = "Ravi Traders",
                            SerialNumber = 1,
                            State = "Tamil Nadu",
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WhatsappNumber = "9876543210"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Address = "Near MG Road, Kochi",
                            City = "Kochi",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerName = "Suresh Babu",
                            Email = "suresh@example.com",
                            Map = "https://maps.google.com/?q=suresh+distributors",
                            Name = "Suresh Distributors",
                            SerialNumber = 2,
                            State = "Kerala",
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WhatsappNumber = "9876543211"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Address = "Brigade Road, Bangalore",
                            City = "Bangalore",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerName = "Karthik",
                            Email = "karthik@example.com",
                            Map = "https://maps.google.com/?q=karthik+hardware",
                            Name = "Karthik Hardware",
                            SerialNumber = 3,
                            State = "Karnataka",
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WhatsappNumber = "9876543212"
                        });
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entities.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555555555555"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Name = "Glossy Finish"
                        },
                        new
                        {
                            Id = new Guid("66666666-7777-8888-9999-000000000000"),
                            CategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Name = "Matt Finish"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            CategoryId = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Name = "Anti-Skid"
                        },
                        new
                        {
                            Id = new Guid("99999999-aaaa-bbbb-cccc-dddddddddddd"),
                            CategoryId = new Guid("5b9a3c84-2d5f-4b8e-97c9-6f7d8b2e3a1f"),
                            Name = "Granite Look"
                        });
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirst")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Otp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Designation = "Administrator",
                            Email = "admin@example.com",
                            IsActive = true,
                            IsFirst = true,
                            Name = "Admin",
                            PasswordHash = "$2a$11$yR3e3tvATjy4kQcP9Nlh.eFq3CWcXbgEnDghIxKaD2ZOHMGKhjE9K",
                            Phone = "1234567890",
                            SerialNumber = 1
                        });
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Ecatalog", b =>
                {
                    b.HasOne("Tiles.Core.Domain.Entites.EcatalogCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Product", b =>
                {
                    b.HasOne("Tiles.Core.Domain.Entites.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiles.Core.Domain.Entities.Subcategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entities.Subcategory", b =>
                {
                    b.HasOne("Tiles.Core.Domain.Entites.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tiles.Core.Domain.Entites.Category", b =>
                {
                    b.Navigation("Subcategories");
                });
#pragma warning restore 612, 618
        }
    }
}
